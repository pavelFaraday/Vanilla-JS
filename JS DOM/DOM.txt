.appendChild()
.setAttribute()
.removeAttribute
.textContent()
.innerHTML
.outerHTML
.createElement()
.createDocumentFragment()
.classList()
.classList.add
.classList.remove
.classList.replace
.classList.toggle
.dataset()
.insertBefore()
.children
.cloneNode()
:first-of-type
.nextElementSibling
.getBoundingClientRect()
Bubbling vs Capturing
.title
.insertAdjacentHTML()
.insertAdjacentElement()
.insertAdjacentText()

---------------------------------------------------

---------------------------------------------------

---------------------------------------------------

*** .appendChild() ***
--- add HTML child TAG to parent TAG at the end

document.body.appendChild(newP);
document.querySelector('div').appendChild(newP);
---------------------------------------------------
*** .setAttribute() ***
--- add attrubute and value/name of attrubute to HTML tag |or| change value of existing attribute 

__add new attribute 
document.body.setAttribute('class', 'nightMode');

__change value/name
document.getElementById('water').setAttribute('name', 'Gordon');

__delete attribute
myDiv.removeAttribute('data-name');
---------------------------------------------------
*** .textContent() ***   
--- get and set text content of a node/element 

___get text of Element
alert(Element.textContent);

___set text of element
Element.textContent = 'Welcome guest!';
 ---------------------------------------------------
*** .innerHTML ***   
--- create HTML tag with text

myDiv.innerHTML = '<p>Hy, I am innerHTML</p>';
 --------------------------------------------------- 
*** .outerHTML ***

--- The outerHTML property sets or returns the HTML element and all it's content, including the start tag, it's attributes, and the end tag.

h1.outerHTML = '<p id="red-bg">I have been changed as Para</p>';
 ---------------------------------------------------
 *** .createElement() ***
 
--- create new HTML TAG 

let newP = document.createElement('p');
 ---------------------------------------------------
*** .createDocumentFragment() ***
--- The createDocumentFragment() method creates an imaginary Node object, with all the properties and methods of the Node object. The createDocumentFragment() method is usefull when you want to extract parts of your document, change, add, or delete, some of the content, and insert it back to your document. 

        let ul = document.getElementById('myList');
        let fragment = document.createDocumentFragment();

        let li1 = document.createElement('li');
        let li2 = document.createElement('li');

        li1.textContent = 'Apple';
        li2.textContent = 'Banana';

        fragment.appendChild(li1);
        fragment.appendChild(li2);

        ul.appendChild(fragment);
 ---------------------------------------------------
 *** .classList() ***

--- add Class
MYPARA.classList.add('red-bg', 'bold', 'white');

--- remove Class
MYPARA.classList.remove('red-bg', 'bold', 'white', 'gray-bg');

--- replace Class
MYPARA.classList.replace('red-bg', 'gray-bg');

--- toggle Class
MYPARA.classList.toggle('yellow-bg');
 ---------------------------------------------------
 *** .dataset() ***

 --- change data value
 myDiv.dataset.IAmFrom = 'England';

--- Epmty Data
myDiv.dataset.IAmFrom = '';
 ---------------------------------------------------
 *** .insertBefore() ***

--- in parent <ul> push new made child <li> (OrangeLI), before inserted #peach child
ul.insertBefore(OrangeLI, peach);

--- add at the beginnig of parent node:

        let ul = document.getElementById('myList');
        let plum = document.createElement('li');
        plum.textContent = 'Plum';

        function addBeginnig(parent, child) {
            let firstChild = parent.firstChild;
            parent.insertBefore(child, firstChild);
        }
        addBeginnig(ul, plum);
 ---------------------------------------------------
*** .children ***

const UL = document.getElementById('myList');
let ULchildren = UL.children;
let item3 = ULchildren[2];
 ---------------------------------------------------
*** .cloneNode() ***

const UL = document.getElementById('myList');
let ULchildren = UL.children;
let banana = ULchildren[2];

 1) make a copy
let bananaCopy = banana.cloneNode(true);  // true - means deep coping (copy text too)
 2) add to the end of the <ul> parent Tag
UL.appendChild(bananaCopy);
---------------------------------------------------
*** :first-of-type ***

--- The :first-of-type selector matches every element that is the first child, of a particular type, of its parent.

let item1 = document.querySelector('#myList > li:first-of-type');
---------------------------------------------------
*** .nextElementSibling ***

--- The nextElementSibling property returns the element immediately following the specified element, in the same tree level.
The difference between this property and nextSibling, is that nextSibling returns the next sibling node as an element node, a text node or a comment node, while nextElementSibling returns the next sibling node as an element node (ignores text and comment nodes).

let item2 = item1.nextElementSibling;
---------------------------------------------------
*** .getBoundingClientRect() ***

--- The getBoundingClientRect() method returns the size of an element and its position relative to the viewport. This method returns a DOMRect object with eight properties: left, top, right, bottom, x, y, width, height.

    let rect = div.getBoundingClientRect();
    x = rect.left;
    y = rect.top;
    w = rect.width;
    h = rect.height;
    console.log(x, y, w, h);
---------------------------------------------------
*** Bubbling vs Capturing ***

bubbling:
    bottom -> top 
    from child - > to parent
    false (default)

Capturing:
    top -> bottom 
    from parent - > to child
    true
---------------------------------------------------
*** .title ***

--- change title of page

document.title = `I changed title`;
---------------------------------------------------
*** .insertAdjacentHTML() ***

--- The insertAdjacentHTML() method inserts a text as HTML, into a specified position.

"afterbegin -- After the beginning of the element (as the first child)"
"beforeend -- Before the end of the element (as the last child)"
"afterend -- After the element"
"beforebegin -- Before the element"
---------------------------------------------------
*** .insertAdjacentElement() ***

--- The insertAdjacentElement() method inserts a the specified element into a specified position.

"afterbegin -- After the beginning of the element (as the first child)"
"beforeend -- Before the end of the element (as the last child)"
"afterend -- After the element"
"beforebegin -- Before the element"
---------------------------------------------------
*** .insertAdjacentText() ***

--- The insertAdjacentText() method inserts a the specified element into a specified position.

"afterbegin -- After the beginning of the element (as the first child)"
"beforeend -- Before the end of the element (as the last child)"
"afterend -- After the element"
"beforebegin -- Before the element"
---------------------------------------------------