# ---------------------------------------------------------------------------- #
#                           Event Listeners Syntax:                            #
# ---------------------------------------------------------------------------- #

 ___Basic Syntax:___
Object.addEventListener('event', function); 

 -- Object -- is often variable that stores/saves HTML element (tag, div, class, id, input, button..)
 -- addEventListener -- defines for browser an event
 -- event -- click, blur, change, input, load, focus, Mouse_down, Mouse_up..
 -- function -- function, that will execute by event.. 
                (name of a function, Arrow function, Anonimous function)
                Just put name of the function! Don't add parentheses into the and of it!

# ---------------------------------------------------------------------------- #
#                           Event Listeners Examples                           #
# ---------------------------------------------------------------------------- #

    myDiv.addEventListener('click',  function(a){
        console.log(a+2);
    });

    myDiv.addEventListener('click', doSomething);
    function doSomething(a) {
        console.log(a+2);
    }

    myDiv.addEventListener('click', (a) => {
        console.log(a+2);
    });

!!! Named function You can reuse into another events !!!
!!! Arrow function, Anonimous function you CAN'T REUSE into another events !!!

# ---------------------------------------------------------------------------- #
#                DOMContentLoaded - add EventListener to the DOM               #
# ---------------------------------------------------------------------------- #

___DOMContentLoaded / First Browser must finish reading through all the HTML document. So, after this moment, it will read JS document and function 'imFunction'___

document.addEventListener('DOMContentLoaded', imFunction);



# ---------------------------------------------------------------------------- #
#                                Event Listeners:                              #
# ---------------------------------------------------------------------------- #

-- input --
___when the person writes something into input___
target.addEventListener('input', (ev) => {
    console.log(ev.type, ev.target, ev.target.value);
});
----------------------------------------------------------------------------

-- change -- 
___when the person changes something into input and leaves input fild___

target.addEventListener('change', (ev) => {
    console.log(ev.type, ev.target, ev.target.value);
});
----------------------------------------------------------------------------

-- blur --
___when the person doesn't change nothing and leaves input fild___

target.addEventListener('blur', (ev) => {
    console.log(ev.type, ev.target, ev.target.value);
});
----------------------------------------------------------------------------

___Stop default browser behaviour - stop link from the being followed or something___

ev.preventDefault(); 

# ---------------------------------------------------------------------------- #
#                        Event Bubbling and Propagation                        #
# ---------------------------------------------------------------------------- #

https://javascript.info/bubbling-and-capturing
Also see Example picture -- 'Event Bubbling.png'

The bubbling principle is simple:
* When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors. 

Let’s say we have 3 nested elements FORM > DIV > P with a handler on each of them:

<form onclick="alert('form')">FORM
  <div onclick="alert('div')">DIV
    <p onclick="alert('p')">P</p>
  </div>
</form>

A click on the inner <p> first runs onclick:
On that <p>.
Then on the outer <div>.
Then on the outer <form>.
And so on upwards till the document object.

!!! So if we click on <p>, then we’ll see 3 alerts: p → div → form. !!!

The process is called “bubbling”, because events “bubble” from the inner element up through parents like a bubble in the water.

----------------------------------------------------------------------------
----------------------------------------------------------------------------

___For STOPPING Bubbling - add into the function of event___
* ev.stopPropagation();  

___choose target's parents too for event (span -> p → div..) Bubbling Principle___
* ev.target;

___choose concretly this one target (div, tag, class..) NOT Bubbling Principle___
___See good example at: https://www.w3schools.com/jsref/tryit.asp?filename=try_dom_event_currenttarget
* ev.currentTarget; 

___How add CSS class to element:
* target.className = 'gold'; 

___How remove CSS class from element:
* element.className = ''; 

___All events after this function will stop:
* ev.stopImmediatePropagation();