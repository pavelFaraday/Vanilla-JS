# ---------------------------------------------------------------------------- #
#                           Event Listeners Syntax:                            #
# ---------------------------------------------------------------------------- #

 ___Basic Syntax:___
Object.addEventListener('event', function); 

 -- Object -- is often variable that stores/saves HTML element (tag, div, class, id, input, button..)
 -- addEventListener -- defines for browser an event
 -- event -- click, blur, change, input, load, focus, Mouse_down, Mouse_up..
 -- function -- function, that will execute by event.. 
                (name of a function, Arrow function, Anonimous function)
                Just put name of the function! Don't add parentheses into the and of it!

# ---------------------------------------------------------------------------- #
#                           Event Listeners Examples                           #
# ---------------------------------------------------------------------------- #

    myDiv.addEventListener('click',  function(a){
        console.log(a+2);
    });

    myDiv.addEventListener('click', doSomething);
    function doSomething(a) {
        console.log(a+2);
    }

    myDiv.addEventListener('click', (a) => {
        console.log(a+2);
    });

!!! Named function You can reuse into another events !!!
!!! Arrow function, Anonimous function you CAN'T REUSE into another events !!!

# ---------------------------------------------------------------------------- #
#                DOMContentLoaded - add EventListener to the DOM               #
# ---------------------------------------------------------------------------- #

___DOMContentLoaded / First Browser must finish reading through all the HTML document. So, after this moment, it will read JS document and function 'imFunction'___

document.addEventListener('DOMContentLoaded', imFunction);



# ---------------------------------------------------------------------------- #
#                                Event Listeners:                              #
# ---------------------------------------------------------------------------- #

-- input --
___when the person writes something into input___

target.addEventListener('input', (ev) => {
    console.log(ev.type, ev.target, ev.target.value);
});
----------------------------------------------------------------------------

-- change -- 
___when the person changes something into input and leaves input fild___

target.addEventListener('change', (ev) => {
    console.log(ev.type, ev.target, ev.target.value);
});
----------------------------------------------------------------------------

-- blur --
___when the person doesn't change nothing and leaves input fild___

target.addEventListener('blur', (ev) => {
    console.log(ev.type, ev.target, ev.target.value);
});
----------------------------------------------------------------------------

___Stop default browser behaviour - stop link from the being followed or something___

ev.preventDefault(); 

# ---------------------------------------------------------------------------- #
#                        Event Bubbling and Propagation                        #
# ---------------------------------------------------------------------------- #

https://javascript.info/bubbling-and-capturing
Also see Example picture -- 'Event Bubbling.png'

The bubbling principle is simple:
* When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors. 

Let’s say we have 3 nested elements FORM > DIV > P with a handler on each of them:

<form onclick="alert('form')">FORM
  <div onclick="alert('div')">DIV
    <p onclick="alert('p')">P</p>
  </div>
</form>

A click on the inner <p> first runs onclick:
On that <p>.
Then on the outer <div>.
Then on the outer <form>.
And so on upwards till the document object.

!!! So if we click on <p>, then we’ll see 3 alerts: p → div → form. !!!

The process is called “bubbling”, because events “bubble” from the inner element up through parents like a bubble in the water.

----------------------------------------------------------------------------
----------------------------------------------------------------------------

___For STOPPING Bubbling - add into the function of event___
* ev.stopPropagation();  

___choose target's parents too for event (span -> p → div..) Bubbling Principle___
* ev.target;

___choose concretly this one target (div, tag, class..) NOT Bubbling Principle___
___See good example at: https://www.w3schools.com/jsref/tryit.asp?filename=try_dom_event_currenttarget
* ev.currentTarget; 
'<input type="text" id="txt">'

___How add CSS class to element:
* target.className = 'gold'; 

___How remove CSS class from element:
* element.className = ''; 

___All events after this function will stop:
* ev.stopImmediatePropagation();


# ---------------------------------------------------------------------------- #
#                          Built-in handleEvent method                         #
# ---------------------------------------------------------------------------- #

Event Listeners actually have a built-in handle event method: that means, we can create one function that handles all the events that are happennig to an object.

*    --this-- means: this hole object ('let obj') handles all events, it points to hole 'let obj' and says: hey, look at the handleEvent function and with it handle all events !!!
*    --handleEvent-- :  it handles all Events into object ('let obj'). 'handleEvents' is a special name, it is built-in method. One function is handling all of events and redirects them throughout.


/* -------------------------------------------------------------------------- */
/*                       Keyboard events in the Browser                       */
/* -------------------------------------------------------------------------- */

* let target = ev.currentTarget;   --- --- ---    <input type="text" id="txt">

___only name of current tag ('input') with Caps-Lock___
* target.tagName --- --- --- INPUT

___unicode value of the character that has been typed/pressed. Depending on which browser u are and when u are running this, there are few different properties/possibilities that could give u the Unicode character for whatever was pressed on the kaybord___
* ev.char || ev.charCode || ev.which

___Convert unicode value into string___
* String.fromCharCode(char); --- --- --- 75 -> K
https://www.cs.cmu.edu/~pattis/15-1XX/common/handouts/ascii.html
https://www.w3schools.com/charsets/ref_html_ascii.asp

___Keybord Events (very similar to Mouse events):___
* keydown - when u are pressing key
* keyup - when u release key
* keypress - when u done both (keydown + keyup)

