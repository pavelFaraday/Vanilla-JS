# ---------------------------------------------------------------------------- #
#                           Event Listeners Syntax:                            #
# ---------------------------------------------------------------------------- #

 ___Basic Syntax:___
Object.addEventListener('event', function); 

 -- Object -- is often variable that stores/saves HTML element (tag, div, class, id, input, button..)
 -- addEventListener -- defines for browser an event
 -- event -- click, blur, change, input, load, focus, Mouse_down, Mouse_up..
 -- function -- function, that will execute by event.. 
                (name of a function, Arrow function, Anonimous function)
                Just put name of the function! Don't add parentheses into the and of it!

# ---------------------------------------------------------------------------- #
#                           Event Listeners Examples                           #
# ---------------------------------------------------------------------------- #

    myDiv.addEventListener('click',  function(a){
        console.log(a+2);
    });

    myDiv.addEventListener('click', doSomething);
    function doSomething(a) {
        console.log(a+2);
    }

    myDiv.addEventListener('click', (a) => {
        console.log(a+2);
    });

!!! Named function You can reuse into another events !!!
!!! Arrow function, Anonimous function you CAN'T REUSE into another events !!!

# ---------------------------------------------------------------------------- #
#                DOMContentLoaded - add EventListener to the DOM               #
# ---------------------------------------------------------------------------- #

___DOMContentLoaded / First Browser must finish reading through all the HTML document. So, after this moment, it will read JS document and function 'imFunction'___

document.addEventListener('DOMContentLoaded', imFunction);

# ---------------------------------------------------------------------------- #
#                                Event Listeners:                              #
# ---------------------------------------------------------------------------- #

-- input --
___when the person writes something into input___

target.addEventListener('input', (ev) => {
    console.log(ev.type, ev.target, ev.target.value);
});
----------------------------------------------------------------------------

-- change -- 
___when the person changes something into input and leaves input fild___

target.addEventListener('change', (ev) => {
    console.log(ev.type, ev.target, ev.target.value);
});
----------------------------------------------------------------------------

-- blur --
___when the person doesn't change nothing and leaves input fild___

target.addEventListener('blur', (ev) => {
    console.log(ev.type, ev.target, ev.target.value);
});
----------------------------------------------------------------------------

___Stop default browser behaviour - stop link from the being followed or something___

ev.preventDefault(); 

# ---------------------------------------------------------------------------- #
#                        Event Bubbling and Propagation                        #
# ---------------------------------------------------------------------------- #

https://javascript.info/bubbling-and-capturing
Also see Example picture -- 'Event Bubbling.png'

The bubbling principle is simple:
* When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors. 

Let’s say we have 3 nested elements FORM > DIV > P with a handler on each of them:

<form onclick="alert('form')">FORM
  <div onclick="alert('div')">DIV
    <p onclick="alert('p')">P</p>
  </div>
</form>

A click on the inner <p> first runs onclick:
On that <p>.
Then on the outer <div>.
Then on the outer <form>.
And so on upwards till the document object.

!!! So if we click on <p>, then we’ll see 3 alerts: p → div → form. !!!

The process is called “bubbling”, because events “bubble” from the inner element up through parents like a bubble in the water.

----------------------------------------------------------------------------
----------------------------------------------------------------------------

___For STOPPING Bubbling - add into the function of event___
* ev.stopPropagation();  

___choose target's parents too for event (span -> p → div..) Bubbling Principle___
* ev.target;

___choose concretly this one target (div, tag, class..) NOT Bubbling Principle___
___See good example at: https://www.w3schools.com/jsref/tryit.asp?filename=try_dom_event_currenttarget
* ev.currentTarget; 
'<input type="text" id="txt">'

___How add CSS class to element:
* target.className = 'gold'; 

___How remove CSS class from element:
* element.className = ''; 

--------/ OR /--------

* div.classList.remove("foo");
* div.classList.add("anotherclass");


___All events after this function will stop:
* ev.stopImmediatePropagation();


# ---------------------------------------------------------------------------- #
#                          Built-in handleEvent method                         #
# ---------------------------------------------------------------------------- #

Event Listeners actually have a built-in handle event method: that means, we can create one function that handles all the events that are happennig to an object.

*    --this-- means: this hole object ('let obj') handles all events, it points to hole 'let obj' and says: hey, look at the handleEvent function and with it handle all events !!!
*    --handleEvent-- :  it handles all Events into object ('let obj'). 'handleEvents' is a special name, it is built-in method. One function is handling all of events and redirects them throughout.


/* -------------------------------------------------------------------------- */
/*                       Keyboard events in the Browser                       */
/* -------------------------------------------------------------------------- */

* let target = ev.currentTarget;   --- --- ---    <input type="text" id="txt">

___only name of current tag ('input') with Caps-Lock___
* target.tagName --- --- --- INPUT

___unicode value of the character that has been typed/pressed. Depending on which browser u are and when u are running this, there are few different properties/possibilities that could give u the Unicode character for whatever was pressed on the kaybord___
* ev.char || ev.charCode || ev.which

___Convert unicode value into string___
* String.fromCharCode(char); --- --- --- 75 -> K
https://www.cs.cmu.edu/~pattis/15-1XX/common/handouts/ascii.html
https://www.w3schools.com/charsets/ref_html_ascii.asp

___Keybord Events (very similar to Mouse events):___
* keydown - when u are pressing key
* keyup - when u release key
* keypress - when u done both (keydown + keyup)

# ---------------------------------------------------------------------------- #
#                                 Mouse Events                                 #
# ---------------------------------------------------------------------------- #

Mouse Events - (MouseOver/MouseOut, MouseEnter/MouseLeave) it's look like they do same thing, But difference is _How they handle Bubbling_

___When you move mouse over the object/გადატარება___
* MouseOver 
___When you remove mouse from the object/მოცილება___
* MouseOut 

___When you move mouse over the object/გადატარება___
* MouseEnter 
___When you remove mouse from the object/მოცილება___
* MouseLeave 

# ---------------------------------------------------------------------------- #
#                Foucuse events  |  Event relatedTarget Property               #
# ---------------------------------------------------------------------------- #

When your user tabs to a link or clicks on some other element that can hold focus we have several event types that we can work with: focusin, focusout, focus, and blur.
! But difference is _How they handle Bubbling_
* focusout === blur --- Bubble out!
* focusin === focus --- don't Bubble out!

! When moving between different elements that can hold focus we will have access to a property called __relatedTarget__. This property will know where we are headed or where we just came from.
The relatedTarget property returns the element related to the element that triggered the mouse event.
! The relatedTargert property can be used with the mouseover event to indicate the element the cursor just exited, or with the mouseout event to indicate the element the cursor just entered.
The relatedTarget property also works with mouseenter, mouseleave, mouseover, mouseout, dragenter, and dragexit. 

* ev.relatedTarget


----------------------------------------------------------------------- 
                      * setTimeout() & setInterval()                       
 ----------------------------------------------------------------------- 

JavaScript can be executed in time-intervals.
This is called timing events.

__Executes a function, after waiting a specified number of milliseconds___
* setTimeout(function, milliseconds)

__Same as setTimeout(), but repeats the execution of the function continuously__
* setInterval(function, milliseconds)

 ----------------------------------------------------------------------- 
                           * removeEventListener                           
 ----------------------------------------------------------------------- 

Remove a "mousemove" event that has been attached with the addEventListener() method:

___Attach an event handler to <div>___
document.getElementById("myDIV").addEventListener("mousemove", myFunction);

___Remove the event handler from <div>___
document.getElementById("myDIV").removeEventListener("mousemove", myFunction);

 ----------------------------------------------------------------------- 
                              * parentElement                              
 ----------------------------------------------------------------------- 

https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_node_parentelement_hide

__The parentElement property returns the parent element of the specified element__

<div>
    <p onclick="this.parentElement.style.display = 'none';">
        To close this container, click on this text.
    </p>
</div>

 ----------------------------------------------------------------------- 
                              * removeChild()                              
 ----------------------------------------------------------------------- 

https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_node_removechild

___The removeChild() method removes a specified child node of the specified element___

function myFunction() {
  var list = document.getElementById("myList");
  list.removeChild(list.childNodes[0]);
}

 ----------------------------------------------------------------------- 
                              * appendChild()                              
 ----------------------------------------------------------------------- 

https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_node_appendchild

___The appendChild() method appends a node as the last child of a node___

function myFunction() {
  var newLI = document.createElement("LI");
  var text = document.createTextNode("Water");
  newLI.appendChild(text);
  document.getElementById("myList").appendChild(newLI);
}

Oposite of removeChild() !

 ----------------------------------------------------------------------- 
                      * createTextNode()  |||  textContent()               
 ----------------------------------------------------------------------- 

___The createTextNode() method creates a Text Node with the specified text___
* createTextNode()

___The textContent property sets or returns the text content of the specified node, and all its **descendants**___
* textContent

<p>Click the button get the text content of the button element.</p>
<button onclick="myFunction()">Try it</button>

<div id="myBtn">
    <p>Ble Blu</p>
    <p>Ble Blu</p>
    <p>Ble Blu</p>
</div>

<p id="demo"></p>

function myFunction() {
  var x = document.getElementById("myBtn").textContent;
  document.getElementById("demo").innerHTML = x;  
}

 ----------------------------------------------------------------------- 
                                *  on()                                   
 ----------------------------------------------------------------------- 

The on() method attaches one or more event handlers for the selected elements and child elements.


# ---------------------------------------------------------------------------- #
#                Building Right-click Menus | contextmanu Event                #
# ---------------------------------------------------------------------------- #

___contextmenu event occurs when the user right-clicks on an element to open the context menu.___
* element.addEventListener('contextmenu', showmenu); 


